{"uid":"4b391c9de2fd0cd3","name":"test_cookies","fullName":"test_vizsgaremek_conduit_CSK.test_vizsgaremek_conduit_CSK.TestConduit#test_cookies","historyId":"f515021c46f8e82c585b2706f252a614","time":{"start":1680879412859,"stop":1680879412859,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=111.0.5563.146)\nStacktrace:\n#0 0x55f0f4bc2243 <unknown>\n#1 0x55f0f49867a6 <unknown>\n#2 0x55f0f497e728 <unknown>\n#3 0x55f0f4971772 <unknown>\n#4 0x55f0f4972e82 <unknown>\n#5 0x55f0f4971b3a <unknown>\n#6 0x55f0f4970bf8 <unknown>\n#7 0x55f0f4970a30 <unknown>\n#8 0x55f0f496f508 <unknown>\n#9 0x55f0f496fb3d <unknown>\n#10 0x55f0f4988596 <unknown>\n#11 0x55f0f49fcfc5 <unknown>\n#12 0x55f0f49e4082 <unknown>\n#13 0x55f0f49fc932 <unknown>\n#14 0x55f0f49e3e53 <unknown>\n#15 0x55f0f49b69ea <unknown>\n#16 0x55f0f49b7b2e <unknown>\n#17 0x55f0f4c16d5e <unknown>\n#18 0x55f0f4c1aa80 <unknown>\n#19 0x55f0f4bfc8b0 <unknown>\n#20 0x55f0f4c1bb63 <unknown>\n#21 0x55f0f4bedf75 <unknown>\n#22 0x55f0f4c3e998 <unknown>\n#23 0x55f0f4c3eb27 <unknown>\n#24 0x55f0f4c59c23 <unknown>\n#25 0x7f145db4cb43 <unknown>","statusTrace":"self = <test_vizsgaremek_conduit_CSK.TestConduit object at 0x7f6c2b672740>\n\n    def setup_method(self):\n        service = Service(executable_path=ChromeDriverManager().install())\n        options = Options()\n        options.add_experimental_option(\"detach\", True)\n        options.add_argument('--headless')\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n        self.browser = webdriver.Chrome(service=service, options=options)\n        URL = \"http://localhost:1667/\"\n>       self.browser.get(URL)\n\ntest_vizsgaremek_conduit_CSK/test_vizsgaremek_conduit_CSK.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c2b747af0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55f0f4c3eb27 \\\\u003Cunknown>\\\\n#24 0x55f0f4c59c23 \\\\u003Cunknown>\\\\n#25 0x7f145db4cb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=111.0.5563.146)\nE       Stacktrace:\nE       #0 0x55f0f4bc2243 <unknown>\nE       #1 0x55f0f49867a6 <unknown>\nE       #2 0x55f0f497e728 <unknown>\nE       #3 0x55f0f4971772 <unknown>\nE       #4 0x55f0f4972e82 <unknown>\nE       #5 0x55f0f4971b3a <unknown>\nE       #6 0x55f0f4970bf8 <unknown>\nE       #7 0x55f0f4970a30 <unknown>\nE       #8 0x55f0f496f508 <unknown>\nE       #9 0x55f0f496fb3d <unknown>\nE       #10 0x55f0f4988596 <unknown>\nE       #11 0x55f0f49fcfc5 <unknown>\nE       #12 0x55f0f49e4082 <unknown>\nE       #13 0x55f0f49fc932 <unknown>\nE       #14 0x55f0f49e3e53 <unknown>\nE       #15 0x55f0f49b69ea <unknown>\nE       #16 0x55f0f49b7b2e <unknown>\nE       #17 0x55f0f4c16d5e <unknown>\nE       #18 0x55f0f4c1aa80 <unknown>\nE       #19 0x55f0f4bfc8b0 <unknown>\nE       #20 0x55f0f4c1bb63 <unknown>\nE       #21 0x55f0f4bedf75 <unknown>\nE       #22 0x55f0f4c3e998 <unknown>\nE       #23 0x55f0f4c3eb27 <unknown>\nE       #24 0x55f0f4c59c23 <unknown>\nE       #25 0x7f145db4cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1680879412860,"stop":1680879414524,"duration":1664},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=111.0.5563.146)\nStacktrace:\n#0 0x55f0f4bc2243 <unknown>\n#1 0x55f0f49867a6 <unknown>\n#2 0x55f0f497e728 <unknown>\n#3 0x55f0f4971772 <unknown>\n#4 0x55f0f4972e82 <unknown>\n#5 0x55f0f4971b3a <unknown>\n#6 0x55f0f4970bf8 <unknown>\n#7 0x55f0f4970a30 <unknown>\n#8 0x55f0f496f508 <unknown>\n#9 0x55f0f496fb3d <unknown>\n#10 0x55f0f4988596 <unknown>\n#11 0x55f0f49fcfc5 <unknown>\n#12 0x55f0f49e4082 <unknown>\n#13 0x55f0f49fc932 <unknown>\n#14 0x55f0f49e3e53 <unknown>\n#15 0x55f0f49b69ea <unknown>\n#16 0x55f0f49b7b2e <unknown>\n#17 0x55f0f4c16d5e <unknown>\n#18 0x55f0f4c1aa80 <unknown>\n#19 0x55f0f4bfc8b0 <unknown>\n#20 0x55f0f4c1bb63 <unknown>\n#21 0x55f0f4bedf75 <unknown>\n#22 0x55f0f4c3e998 <unknown>\n#23 0x55f0f4c3eb27 <unknown>\n#24 0x55f0f4c59c23 <unknown>\n#25 0x7f145db4cb43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 901, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/_pytest/python.py\", line 907, in xunit_setup_method_fixture\n    _call_with_optional_argument(func, method)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/_pytest/python.py\", line 788, in _call_with_optional_argument\n    func()\n  File \"/home/runner/work/conduit/conduit/test_vizsgaremek_conduit_CSK/test_vizsgaremek_conduit_CSK.py\", line 21, in setup_method\n    self.browser.get(URL)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 449, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: headless chrome=111.0.5563.146)\nStacktrace:\n#0 0x55f0f4bc2243 <unknown>\n#1 0x55f0f49867a6 <unknown>\n#2 0x55f0f497e728 <unknown>\n#3 0x55f0f4971772 <unknown>\n#4 0x55f0f4972e82 <unknown>\n#5 0x55f0f4971b3a <unknown>\n#6 0x55f0f4970bf8 <unknown>\n#7 0x55f0f4970a30 <unknown>\n#8 0x55f0f496f508 <unknown>\n#9 0x55f0f496fb3d <unknown>\n#10 0x55f0f4988596 <unknown>\n#11 0x55f0f49fcfc5 <unknown>\n#12 0x55f0f49e4082 <unknown>\n#13 0x55f0f49fc932 <unknown>\n#14 0x55f0f49e3e53 <unknown>\n#15 0x55f0f49b69ea <unknown>\n#16 0x55f0f49b7b2e <unknown>\n#17 0x55f0f4c16d5e <unknown>\n#18 0x55f0f4c1aa80 <unknown>\n#19 0x55f0f4bfc8b0 <unknown>\n#20 0x55f0f4c1bb63 <unknown>\n#21 0x55f0f4bedf75 <unknown>\n#22 0x55f0f4c3e998 <unknown>\n#23 0x55f0f4c3eb27 <unknown>\n#24 0x55f0f4c59c23 <unknown>\n#25 0x7f145db4cb43 <unknown>","statusTrace":"self = <test_vizsgaremek_conduit_CSK.TestConduit object at 0x7f6c2b672740>\n\n    def setup_method(self):\n        service = Service(executable_path=ChromeDriverManager().install())\n        options = Options()\n        options.add_experimental_option(\"detach\", True)\n        options.add_argument('--headless')\n        options.add_argument('--no-sandbox')\n        options.add_argument('--disable-dev-shm-usage')\n        self.browser = webdriver.Chrome(service=service, options=options)\n        URL = \"http://localhost:1667/\"\n>       self.browser.get(URL)\n\ntest_vizsgaremek_conduit_CSK/test_vizsgaremek_conduit_CSK.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c2b747af0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x55f0f4c3eb27 \\\\u003Cunknown>\\\\n#24 0x55f0f4c59c23 \\\\u003Cunknown>\\\\n#25 0x7f145db4cb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: headless chrome=111.0.5563.146)\nE       Stacktrace:\nE       #0 0x55f0f4bc2243 <unknown>\nE       #1 0x55f0f49867a6 <unknown>\nE       #2 0x55f0f497e728 <unknown>\nE       #3 0x55f0f4971772 <unknown>\nE       #4 0x55f0f4972e82 <unknown>\nE       #5 0x55f0f4971b3a <unknown>\nE       #6 0x55f0f4970bf8 <unknown>\nE       #7 0x55f0f4970a30 <unknown>\nE       #8 0x55f0f496f508 <unknown>\nE       #9 0x55f0f496fb3d <unknown>\nE       #10 0x55f0f4988596 <unknown>\nE       #11 0x55f0f49fcfc5 <unknown>\nE       #12 0x55f0f49e4082 <unknown>\nE       #13 0x55f0f49fc932 <unknown>\nE       #14 0x55f0f49e3e53 <unknown>\nE       #15 0x55f0f49b69ea <unknown>\nE       #16 0x55f0f49b7b2e <unknown>\nE       #17 0x55f0f4c16d5e <unknown>\nE       #18 0x55f0f4c1aa80 <unknown>\nE       #19 0x55f0f4bfc8b0 <unknown>\nE       #20 0x55f0f4c1bb63 <unknown>\nE       #21 0x55f0f4bedf75 <unknown>\nE       #22 0x55f0f4c3e998 <unknown>\nE       #23 0x55f0f4c3eb27 <unknown>\nE       #24 0x55f0f4c59c23 <unknown>\nE       #25 0x7f145db4cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","steps":[],"attachments":[{"uid":"bb4eca0d7e942527","name":"stderr","source":"bb4eca0d7e942527.txt","type":"text/plain","size":159}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"test_vizsgaremek_conduit_CSK"},{"name":"suite","value":"test_vizsgaremek_conduit_CSK"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az749-884"},{"name":"thread","value":"2405-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_vizsgaremek_conduit_CSK.test_vizsgaremek_conduit_CSK"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4b391c9de2fd0cd3.json","parameterValues":[]}